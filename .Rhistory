minBoot=80,
multithread = 4,
tryRC = F,
verbose = TRUE)
mat <- as.data.frame(taxa)
table(mat$Species)
tax_table(ps.blautia) <- tax_table(taxa)
ps.blautia %>%
microbiomeutilities::add_refseq() %>%
microbiomeutilities::format_to_besthit() %>%
microbiome::transform("compositional") %>%
plot_heatmap()
ps.blautia %>%
microbiomeutilities::add_refseq() %>%
subset_taxa(Genus == "Blautia") %>%
microbiomeutilities::format_to_besthit() %>%
microbiome::transform("compositional") %>%
plot_heatmap()
ps.blautia %>%
microbiomeutilities::add_refseq() %>%
subset_taxa(Genus == "Blautia") %>%
microbiomeutilities::format_to_besthit() %>%
microbiome::transform("compositional") %>%
plot_heatmap()
ps.blautia <- subset_taxa(ps, Genus == "Blautia")
sample_data(ps.blautia)$Time_hr <- as.numeric(sample_data(ps.blautia)$Time_hr)
#ps.blautia <- subset_samples(ps.blautia, Time_hr <152)
ps.blautia <- prune_taxa(taxa_sums(ps.blautia) >0, ps.blautia)
#message(paste0("Dataset is too big to be processed at once. Divind dataset in ", nr_chunks, " chunks to avoid memory crashing..."))
dna <- DNAStringSet(taxa_names(ps.blautia))
taxa <- assignTaxonomy(dna,
refFasta = "../dbs/blautia_16s_db.fas",
minBoot=80,
multithread = 4,
tryRC = T,
verbose = TRUE,
outputBootstraps = TRUE)
mat <- as.data.frame(taxa)
table(mat$Species)
head(mat)
mat <- as.data.frame(taxa) %>%
subset(boot.Species==100)
head(mat)
mat <- as.data.frame(taxa) %>%
subset(boot.Species==100) %>%
select(starts_with("tax"))
colnames(mat)
colnames(mat) <- gsub("tax.", "", colnames(mat))
table(mat$Species)
tax_table(ps.blautia) <- tax_table(taxa)
ps.blautia %>%
microbiomeutilities::add_refseq() %>%
subset_taxa(Genus == "Blautia") %>%
microbiomeutilities::format_to_besthit() %>%
microbiome::transform("compositional") %>%
plot_heatmap()
ps.blautia %>%
microbiomeutilities::add_refseq() %>%
subset_taxa(Genus == "Blautia") %>%
microbiomeutilities::format_to_besthit() %>%
#microbiome::transform("compositional") %>%
plot_heatmap()
table(mat$Species, useNA= "always")
ps.blautia %>%
microbiomeutilities::add_refseq() %>%
subset_taxa(Genus == "Blautia") %>%
microbiomeutilities::format_to_besthit() %>%
#microbiome::transform("compositional") %>%
plot_heatmap()
biomeUtils::getTaxaSummary(ps.blautia, "Species")
ps.blautia %>%
biomeUtils::filterSampleData(Time_hr <152) %>%
biomeUtils::getTaxaSummary("Species")
ps.blautia %>%
microbiomeutilities::add_refseq() %>%
subset_taxa(Genus == "Blautia") %>%
microbiomeutilities::format_to_besthit() %>%
#microbiome::transform("compositional") %>%
microbiome::heat()
?microbiome::heat
ps.df <- microbiomeutilities::phy_to_ldf(ps.blautia, transform.counts = NULL)
head(ps.df)
head()
microbiome::heat
colnames(ps.df)
ps.f <- microbiomeutilities::format_to_besthit(ps.blautia)
ps.df <- microbiomeutilities::phy_to_ldf(ps.f, transform.counts = NULL)
head(ps.df)
ps.f <- ps.blautia %>%
microbiomeutilities::add_refseq() %>%
subset_taxa(Genus == "Blautia") %>%
microbiomeutilities::format_to_besthit(ps.blautia)
ps.f <- ps.blautia %>%
microbiomeutilities::add_refseq() %>%
subset_taxa(Genus == "Blautia") %>%
microbiomeutilities::format_to_besthit()
ps.df <- microbiomeutilities::phy_to_ldf(ps.f, transform.counts = NULL)
head(ps.df)
ggplot(aes(Time_hr, best_hit)) +
geom_tile(aes(fill=Abundance))
ggplot(ps.df, aes(Time_hr, best_hit)) +
geom_tile(aes(fill=Abundance))
ps.df$TimePoint <- factor(ps.df$TimePoint, levels = unique(ps.df$Time_hr))
ggplot(ps.df, aes(TimePoint, best_hit)) +
geom_tile(aes(fill=Abundance))
factor(ps.df$TimePoint, levels = unique(ps.df$Time_hr))
unique(ps.df$Time_hr)
ggplot(ps.df, aes(FAIR_Labels, best_hit)) +
geom_tile(aes(fill=Abundance))
ps.blautia <- subset_taxa(ps, Genus == "Blautia")
sample_data(ps.blautia)$Time_hr <- as.numeric(sample_data(ps.blautia)$Time_hr)
#ps.blautia <- subset_samples(ps.blautia, Time_hr <152)
ps.blautia <- prune_taxa(taxa_sums(ps.blautia) >0, ps.blautia)
#message(paste0("Dataset is too big to be processed at once. Divind dataset in ", nr_chunks, " chunks to avoid memory crashing..."))
dna <- DNAStringSet(taxa_names(ps.blautia))
taxa <- assignTaxonomy(dna,
refFasta = "../dbs/blautia_16s_db.fas",
minBoot=80,
multithread = 4,
tryRC = T,
verbose = TRUE,
outputBootstraps = TRUE)
getwd()
dna
ps <- SyncomRawCounts %>%
subset_samples(StudyIdentifier %in% c("Bioreactor A", "Bioreactor B", "Bioreactor C"))
ps.blautia <- subset_taxa(ps, Genus == "Blautia")
sample_data(ps.blautia)$Time_hr <- as.numeric(sample_data(ps.blautia)$Time_hr)
#ps.blautia <- subset_samples(ps.blautia, Time_hr <152)
ps.blautia <- prune_taxa(taxa_sums(ps.blautia) >0, ps.blautia)
#message(paste0("Dataset is too big to be processed at once. Divind dataset in ", nr_chunks, " chunks to avoid memory crashing..."))
dna <- DNAStringSet(taxa_names(ps.blautia))
taxa <- assignTaxonomy(dna,
refFasta = "../dbs/blautia_16s_db.fas",
minBoot=80,
multithread = 4,
tryRC = T,
verbose = TRUE,
outputBootstraps = TRUE)
setwd("D:/Post_doc/MM_MDb-MM/syncom_2020/manuscript/journals/isme/ms-syncomR/syncomR")
taxa <- assignTaxonomy(dna,
refFasta = "../dbs/blautia_16s_db.fas",
minBoot=80,
multithread = 4,
tryRC = T,
verbose = TRUE,
outputBootstraps = TRUE)
taxa <- assignTaxonomy(dna,
refFasta = "../dbs/blautia_16s_db.fas",
minBoot=80,
multithread = 4,
tryRC = T,
verbose = TRUE,
outputBootstraps = TRUE)
dna
microbiome::transform(ps.blautia, "compositional") %>%
plot_syncom_composition(type = "area",
time.col = "Time_hr_num",
taxa.level = "OTU",
sp.fill.pal = syncom_colors("BacterialSpecies")[1:16],
facet.var = "StudyIdentifier") +
theme(legend.text = element_text(size=8))
microbiome::transform(ps.blautia, "compositional") %>%
plot_syncom_composition(type = "area",
time.col = "Time_hr",
taxa.level = "OTU",
sp.fill.pal = syncom_colors("BacterialSpecies")[1:16],
facet.var = "StudyIdentifier") +
theme(legend.text = element_text(size=8))
syncom_colors("BacterialSpecies")
plot_syncom_composition(blau.rel, type = "area",
time.col = "Time_hr",
taxa.level = "OTU",
sp.fill.pal = syncom_colors("BacterialSpecies")[c(9,14)],
facet.var = "StudyIdentifier") +
theme(legend.text = element_text(size=8))
blau.rel <- microbiome::transform(ps.blautia, "compositional")
plot_syncom_composition(blau.rel, type = "area",
time.col = "Time_hr",
taxa.level = "OTU",
sp.fill.pal = syncom_colors("BacterialSpecies")[c(9,14)],
facet.var = "StudyIdentifier") +
theme(legend.text = element_text(size=8))
blau.rel <- aggregate_taxa(ps.blautia, "Species") %>%
microbiome::transform("compositional")
plot_syncom_composition(blau.rel, type = "area",
time.col = "Time_hr",
taxa.level = "OTU",
sp.fill.pal = syncom_colors("BacterialSpecies")[c(9,14)],
facet.var = "StudyIdentifier") +
theme(legend.text = element_text(size=8))
blau.rel <- aggregate_taxa(ps.blautia, "Species")#%>%
#microbiome::transform("compositional")
plot_syncom_composition(blau.rel, type = "area",
time.col = "Time_hr",
taxa.level = "OTU",
sp.fill.pal = syncom_colors("BacterialSpecies")[c(9,14)],
facet.var = "StudyIdentifier") +
theme(legend.text = element_text(size=8))
ggplot(ps.df, aes(FAIR_Labels, best_hit)) +
geom_tile(aes(fill=Abundance))
data(SyncomFiltData)
SyncomFiltData.rel <- microbiome::transform(SyncomFiltData, "compositional")
syncomR::syncom_colors
ps = SyncomFiltData.rel
type = "bar"
time.col = "Time_hr_num"
taxa.level = "OTU"
sp.fill.pal = syncomR::syncom_colors("Species")[1:16]
facet.var = "StudyIdentifier"
ps1.sub.df <- comp.plt <- NULL
library(syncomR)
ps1.sub.df <- psmelt(ps)
ps1.sub.df$Time <- as.numeric(ps1.sub.df[, time.col])
ps1.sub.df$Time.ch <- as.factor(ps1.sub.df[, time.col])
comp.plt <- ggplot(ps1.sub.df)
type = "line"
comp.plt <- ggline(ps1.sub.df,
x = "Time",
y = "Abundance",
# error.plot = "pointrange",
colour = taxa.level,
group = taxa.level,
add = c("mean_se", "jitter"),
# color= taxa.level,
# facet.by = facet.var,
palette = sp.fill.pal
) #+        scale_color_manual("Taxa", values = sp.fill.pal)
library(ggpubr)
comp.plt <- ggline(ps1.sub.df,
x = "Time",
y = "Abundance",
# error.plot = "pointrange",
colour = taxa.level,
group = taxa.level,
add = c("mean_se", "jitter"),
# color= taxa.level,
# facet.by = facet.var,
palette = sp.fill.pal
) #+        scale_color_manual("Taxa", values = sp.fill.pal)
comp.plt
head(ps1.sub.df)
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=OTU, Time)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=mean.ab, Time)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=mean.ab, Time)) +
geom_pointrange(aes(ymin = -sd, ymax = sd)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=mean.ab, Time)) +
geom_pointrange(aes(ymin = sd, ymax = sd)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=mean.ab, Time)) +
geom_pointrange(aes(ymin = sd.ab, ymax = sd.ab)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=mean.ab, Time)) +
geom_pointrange(aes(ymin = -sd.ab, ymax = sd.ab)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=mean.ab, Time)) +
geom_pointrange(aes(ymin = mean.ab - sd.ab, ymax = mean.ab + sd.ab)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=mean.ab, Time)) +
geom_pointrange(aes(ymin = mean.ab - sd.ab, ymax = mean.ab + sd.ab,
color=OTU)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU))
ps1.sub.df %>%
group_by(OTU, Time) %>%
summarise(mean.ab=mean(Abundance, na.rm=TRUE),
sd.ab=sd(Abundance, na.rm=TRUE)) %>%
ggplot(aes(x=Time, y=mean.ab, Time)) +
geom_pointrange(aes(ymin = mean.ab - sd.ab, ymax = mean.ab + sd.ab,
color=OTU)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU)) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes(color=OTU)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU)) +
theme_syncom() +
facet_wrap(~StudyIdentifier)
sp.fill.pal = syncomR::syncom_colors("Species")[1:16]
theme_syncom() +
facet_wrap(~StudyIdentifier)
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes(color=OTU)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes(color=OTU)) +
scale_color_manual(values = syncomR::syncom_colors("Species")[1:16]) +
theme_syncom() +
facet_wrap(~StudyIdentifier)
ps1.sub.df <- comp.plt <- NULL
ps1.sub.df <- psmelt(ps)
ps1.sub.df$Time <- as.numeric(ps1.sub.df[, time.col])
ps1.sub.df$Time.ch <- as.factor(ps1.sub.df[, time.col])
comp.plt <- ggplot(ps1.sub.df)
group.var = "StudyIdentifier"
group.var %in% sample_variables(ps)
!is.null(group.var)
comp.plt <- ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level))
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes_string(color=taxa.level)) +
facet_wrap(varf, nrow = nrow, ncol = ncol)
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes_string(color=taxa.level)) +
facet_wrap(varf, nrow = nrow, ncol = ncol) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes_string(color=taxa.level)) +
facet_wrap(~sym(group.var), nrow = nrow, ncol = ncol) +
theme_syncom()
nrow = 3
ncol = 1
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes_string(color=taxa.level)) +
facet_wrap(~sym(group.var), nrow = nrow, ncol = ncol) +
theme_syncom()
group.var
sym(group.var)
var.facet <- sym(group.var)
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes_string(color=taxa.level)) +
facet_wrap(~var.facet, nrow = nrow, ncol = ncol) +
theme_syncom()
var.facet
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
geom_line(aes_string(color=taxa.level)) +
facet_wrap(~var.facet, nrow = nrow, ncol = ncol)
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level))
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(~var.facet, nrow = nrow, ncol = ncol)
var.facet
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_grid( ~ var.facet, nrow = nrow, ncol = ncol) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap( ~ var.facet, nrow = nrow, ncol = ncol)
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap( .var.facet, nrow = nrow, ncol = ncol) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(.~var.facet, nrow = nrow, ncol = ncol) +
theme_syncom()
ps1.sub.df <- phyloseq::psmelt(ps)
ps1.sub.df$Time <- as.numeric(ps1.sub.df[, time.col])
ps1.sub.df$Time.ch <- as.factor(ps1.sub.df[, time.col])
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(.~var.facet, nrow = nrow, ncol = ncol) +
theme_syncom()
var.facet
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance, group = var.facet)) +
geom_line(aes_string(color= taxa.level)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(.~ var.facet, nrow = nrow, ncol = ncol) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(.~ var.facet, nrow = nrow, ncol = ncol) +
geom_line(aes_string(color= taxa.level))
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(.~ "var.facet", nrow = nrow, ncol = ncol) +
geom_line(aes_string(color= taxa.level)) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(.~ group.var, nrow = nrow, ncol = ncol) +
geom_line(aes_string(color= taxa.level)) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(.~ "var.facet", nrow = nrow, ncol = ncol) +
geom_line(aes_string(color= taxa.level)) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(.~var.facet, nrow = nrow, ncol = ncol) +
geom_line(aes_string(color= taxa.level)) +
theme_syncom()
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(~var.facet, nrow = nrow, ncol = ncol) +
geom_line(aes_string(color= taxa.level)) +
theme_syncom()
group.var
ps1.sub.df$StudyIdentifier
var.facet <- sym(group.var)
ps1.sub.df %>%
ggplot(aes(x=Time, y=Abundance)) +
geom_point(aes_string(color=taxa.level)) +
# color="#69b3a2", size=2, alpha=0.9, linetype=2
facet_wrap(var.facet, nrow = nrow, ncol = ncol) +
geom_line(aes_string(color= taxa.level)) +
theme_syncom()
devtools::check()
