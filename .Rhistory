Akkermansia_muciniphila = "#e6194b", Bifidobacterium_adolescentis = "#3cb44b",
Collinsella_aerofaciens = "#1f1f1f", Bacteroides_ovatus = "#4363d8",
Bacteroides_xylanisolvens = "#f58231", Agathobacter_rectalis = "#911eb4",
Anaerobutyricum_soehngenii = "#46f0f0", Eubacterium_siraeum = "#f032e6",
Blautia_hydrogenotrophica = "#bcf60c", Coprococcus_catus = "#fabebe",
Flavonifractor_plautii = "#008080", Roseburia_intestinalis = "#e6beff",
Faecalibacterium_prausnitzii = "#9a6324", Blautia_obeum = "#e4cd05",
Ruminococcus_bromii = "#800000", Subdoligranulum_variabile = "#aaffc3",
Acetate = "#808000", Butyrate = "#ffd8b1",
Formate = "#000075", Propionate = "#808080",
Lactate = "#ffffff", Succinate = "#000000"
)
}
syncom_colors
}
#' @title Default Color Scheme
#' @description Default colors for different variables.
#' @param x Name of the variable type
#' @param v Optional. Vector of elements to color.
#' @return Named character vector of default colors
#' @author Sudarshan Shetty \email{sudarshanshetty9@@gmail.com}
#' @references See citation("syncomR")
#' @export
#' @examples
#' \dontrun{
#' col <- syncom_colors2("Species")
#' }
#' @keywords Theme elements
syncom_colors2 <- function(x, v = NULL) {
if (x == "Species" | x == "Taxon" | x == "Bacteria" | x == "BacterialStrain" | x == "BacterialSpecies" | x=="OTU") {
# http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
# https://www.r-graph-gallery.com/42-colors-names/
syncom_colors2 <- c(
`Akkermansia muciniphila` = "#e6194b", `Bifidobacterium adolescentis` = "#3cb44b",
`Collinsella aerofaciens` = "#1f1f1f", `Bacteroides ovatus` = "#4363d8",
`Bacteroides xylanisolvens` = "#f58231", `Agathobacter rectalis` = "#911eb4",
`Anaerobutyricum soehngenii` = "#46f0f0", `Eubacterium siraeum` = "#f032e6",
`Blautia hydrogenotrophica` = "#bcf60c", `Coprococcus catus` = "#fabebe",
`Flavonifractor plautii` = "#008080", `Roseburia intestinalis` = "#e6beff",
`Faecalibacterium prausnitzii` = "#9a6324", `Blautia obeum` = "#e4cd05",
`Ruminococcus bromii` = "#800000", `Subdoligranulum variabile` = "#aaffc3",
Acetate = "#808000", Butyrate = "#ffd8b1",
Formate = "#000075", Propionate = "#808080",
Lactate = "#ffffff", Succinate = "#000000"
)
}
syncom_colors2
}
dat.stab <- stability_properties(ps1.sub, time.col = "Time_hr")# B. hydrogenotrophic introduced
knitr::kable(head(dat.stab))
p_ba <- plot_nmds_stability(dat.stab)
# the nmds message is printed on purpose for user to check if Solution reached
p_ba$plot + theme_syncom() + xlab("NMDS1") + ylab("NMDS2")
data(SyncomFiltData)
ps1.b5 <- subset_samples(SyncomFiltData, StudyIdentifier== "Bioreactor A")
dat.stab <- stability_properties(ps1.b5, time.col = "Time_hr",
experimentStart = 52, # first spiked sample after initiation of continous feed operation
tref=152)
plot_resistance(dat.stab)
euc <- plot_resilience(dat.stab, method = "euclidean")
canb <- plot_resilience(dat.stab, method = "canberra")
euc /canb
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a")
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + coord_polar()
euc <- plot_resilience(dat.stab, method = "euclidean") + coord_polar()
canb <- plot_resilience(dat.stab, method = "canberra") + coord_polar()
euc /canb
plot_resistance(dat.stab) + coord_polar()
ps1.b5 <- subset_samples(SyncomFiltData, StudyIdentifier== "Bioreactor A")
ps1.b5
dat.stab <- stability_properties(ps1.b5, time.col = "Time_hr",
experimentStart = 52, # first spiked sample after initiation of continous feed operation
tref=152)
dat.stab
plot_resistance(dat.stab) + coord_polar()
dat.stab
stab.in <- dat.stab
#titleSize <- 0.95
numberOfGates <- stab.in$numberOfGates
tref <- stab.in$tref
trefId <- stab.in$trefId
referenceState <- stab.in$referenceState
experimentStart <- stab.in$experimentStart
experimentEnd <- stab.in$experimentEnd
maxEuclideanId <- stab.in$maxEuclideanId
maxCanberraId <- stab.in$maxCanberraId
data <- stab.in$data
# compute radii for reference space
r_Euclidean <- max(data$euclidean[data$referencePhase == TRUE])
r_Canberra <- max(data$canberra[data$referencePhase == TRUE])
# computing stability properties
RSeuclidean <- 1.0 - data[maxEuclideanId, "euclidean"]
RScanberra <- 1.0 - data[maxCanberraId, "canberra"]
DisSpeedeuclidean <- data[maxEuclideanId, "euclidean"] / (data[maxEuclideanId, 1] - tref)
DisSpeedcanberra <- data[maxCanberraId, "canberra"] / (data[maxCanberraId, 1] - tref)
# plots over time
plotData <- data[data[1] >= tref, ]
plotData[1, 2:(numberOfGates + 1)] <- referenceState
plotData$euclidean[1] <- 0
plotData$canberra[1] <- 0
plotData$RLcanberraOnline[1] <- 0
dist.index <- plotData[, c("Time", "euclidean", "canberra")]
df.1 <- dist.index %>% gather(dist.index, Distance, -Time)
df.1$max.dis <- ifelse(df.1$Time == data[maxEuclideanId, 1] & df.1$dist.index == "euclidean", "MaxDeviation",
ifelse(df.1$Time == data[maxCanberraId, 1] & df.1$dist.index == "canberra", "MaxDeviation",
ifelse(df.1$Time == experimentEnd, "ExperimentEnd", "No")
)
)
colnames(df.1) <- c("Time", "DistanceMethod", "Distance", "Variable")
# df.1
p <- ggplot(df.1, aes(Time, Distance)) + theme_syncom() +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(color = DistanceMethod, shape = Variable), size = 2) + scale_color_manual(values = c(
euclidean = "deepskyblue3",
canberra = "brown3"
))
p <- p + scale_shape_manual(values = c(
MaxDeviation = 2,
No = 16,
ExperimentEnd = 0
),guide = FALSE)
lab.txt <- paste(
" Euclidean, RS=", round(RSeuclidean, digits = 4), "| DS=", round(DisSpeedeuclidean, digits = 4), "\n",
"Canberra, RS=", round(RScanberra, digits = 4), "| DS=", round(DisSpeedcanberra, digits = 4)
)
p <- p + geom_hline(aes(yintercept = r_Euclidean),
colour = "deepskyblue3", linetype = "dashed"
) + ylab("Resistance (RS)")+
geom_hline(aes(yintercept = r_Canberra),
colour = "brown3", linetype = "dashed"
) + ggtitle(label = "", subtitle = lab.txt)
p
head(df.1)
df.1$DistanceMethod
p <- ggplot(df.1, aes(Time, Distance)) + theme_syncom() +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(color = DistanceMethod, shape = Variable), size = 2) + scale_color_manual(values = c(
euclidean = "deepskyblue3",
canberra = "brown3"
))
p
p <- ggplot(df.1, aes(Time, Distance)) + theme_syncom() +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(color = DistanceMethod, shape = Variable), size = 2) + scale_color_manual(values = c(
euclidean = "deepskyblue3",
canberra = "brown3"
))
p
p <- null
p <- NULL
# df.1
p <- ggplot(df.1, aes(Time, Distance)) +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(color = DistanceMethod, shape = Variable), size = 2) + scale_color_manual(values = c(
euclidean = "deepskyblue3",
canberra = "brown3"
))
p
head(df.1)
ggplot(df.1, aes(Time, Distance))
ggplot(df.1, aes(Time, Distance)) +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1))
ggplot(df.1, aes(Time, Distance)) +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1))
library(ggplot2)
ggplot(df.1, aes(Time, Distance)) +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(color = DistanceMethod, shape = Variable), size = 2)
ggplot(df.1, aes(Time, Distance)) +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(fill = DistanceMethod, shape = Variable), size = 2)
p <- ggplot(df.1, aes(Time, Distance))
p
p$data
# df.1
p <- ggplot(df.1, aes(Time, Distance)) +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(color = DistanceMethod, shape = Variable), size = 2) +
scale_color_manual(values = c(
euclidean = "deepskyblue3",
canberra = "brown3"
))
p
p <- p + scale_shape_manual(values = c(
MaxDeviation = 2,
No = 16,
ExperimentEnd = 0
),guide = FALSE)
p<-null
p<-NULL
NULL
p <- ggplot(df.1, aes(Time, Distance)) +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(color = DistanceMethod, shape = Variable), size = 2) +
scale_color_manual(values = c(
euclidean = "deepskyblue3",
canberra = "brown3"
))
p
str(df.1)
colnames(df.1) <- c("Time", "DistanceMethod", "Distance", "Variable")
df.1$DistanceMethod <- as.factor(df.1$DistanceMethod)
# df.1
p <- ggplot(df.1, aes(Time, Distance)) +
geom_line(aes(color = DistanceMethod), size = 0.6, alpha = 0.8) + ylim(c(0, 1)) +
geom_point(aes(color = DistanceMethod, shape = Variable), size = 2) +
scale_color_manual(values = c(
euclidean = "deepskyblue3",
canberra = "brown3"
))
p
df.2 <- subset(df.1, DistanceMethod == "euclidean")
df2
df.2
r_Euclidean <- max(data$euclidean[data$referencePhase == TRUE])
r_Euclidean
r_Canberra <- max(data$canberra[data$referencePhase == TRUE])
r_Canberra
maxEuclideanId
maxCanberraId
tax_count
tax_count <- taxa_time_table(ps,
time.col = "Time_hr",
normalize = T,
remove.zero = T
)
tax_count
tax_count <- taxa_time_table(ps,
time.col = "Time_hr",
normalize = TRUE,
remove.zero = TRUE
)
head(tax_count)
library(syncomR)
data(SyncomFiltData)
ps1.b5 <- subset_samples(SyncomFiltData, StudyIdentifier== "Bioreactor A")
dat.stab <- stability_properties(ps1.b5, time.col = "Time_hr",
experimentStart = 52, # first spiked sample after initiation of continous feed operation
tref=152)
plot_resistance(dat.stab) + coord_polar()
plot_resistance(dat.stab) + coord_polar()
otu.mat4
#' @title Make taxa abundance table
#'
#' @description Converts \code{\link{phyloseq-class}} object to taxa table arranged by time point.
#'
#' @details The output of this function can be used for functions that require taxa tables in matrix form.
#' @param ps a \code{\link{phyloseq-class}}
#' @param normalize TRUE or FALSE uses the normalize function from \code{\link{seqtime}} by Faust et al.
#' @param time.col Specifiy column containing time variable
#' @param remove.zero TRUE or FALSE
#' @return Normalized or raw counts taxa abundance table (taxaare rows and timepoits columns).
#' @references
#' \itemize{
#' \item{}{Faust, K., et al. (2018). Signatures of ecological processes in
#' microbial community time series. Microbiome, 6(1), 120. https://doi.org/10.1186/s40168-018-0496-2}
#' \item{}{'Shetty SA et al (2019-2024)}
#' \item{}{To cite the package, see citation('syncomR')}
#' }
#' @examples
#' data(SyncomFiltData)
#' ps1.b5 <- subset_samples(SyncomFiltData, StudyIdentifier == "Bioreactor A")
#' remove_T80 <- c("Ferm_1_5_80", "Ferm_1_6_80", "Ferm_1_8_80")
#' ps1.sub <- prune_samples(!(sample_names(ps1.b5) %in% remove_T80), ps1.b5)
#' otu.tb <- taxa_time_table(ps1.sub, normalize = TRUE, time.col = "Time_hr", remove.zero = TRUE)
#' head(otu.tb)
#' @author Contact: Sudarshan A. Shetty \email{sudarshanshetty9@gmail.com}
#' @export
#' @keywords Anlaysis and visualization
taxa_time_table <-
function(ps,
normalize = c(TRUE, FALSE),
time.col = NULL,
remove.zero = c(TRUE, FALSE)) {
otu.mat <- otu.mat2 <- otu.mat3 <- ps.ml <- NULL
otu.mat <- as.data.frame(abundances(ps))
require(dplyr)
require(seqtime)
ps.ml <- psmelt(ps)
ps.ml$Time <- as.numeric(ps.ml[, time.col])
#otu.m <-
# data.table::dcast(ps.ml, Time ~ OTU, value.var = "Abundance")
otu.m <- ps.ml %>%
select(OTU, Time, Abundance) %>%
group_by(OTU, Time) %>%
tidyr::pivot_wider(id_cols=Time ,names_from = OTU, values_from = Abundance) %>%
arrange(Time)
otu.mat2 <- as.data.frame(otu.m)
#otu.mat2 <- otu.m %>% arrange(Time)
rownames(otu.mat2) <- otu.mat2$Time
otu.mat3 <- otu.mat2[, -1]
if (normalize == TRUE) {
otu.mat4 <-
normalize_seqtime(t(otu.mat3), removeZero = remove.zero) # compositional for Whisker neutrailty test
} else {
otu.mat4 <- otu.mat3
}
return(otu.mat4)
}
tax_count <- taxa_time_table(ps,
time.col = "Time_hr",
normalize = TRUE,
remove.zero = TRUE
)
tax_count
tax_count <- as.data.frame(tax_count)
tax_count$Time <- as.numeric(rownames(tax_count))
tax_count
tax_count$Time <- rownames(tax_count)
tax_count <- tax_count %>% arrange(Time)
tax_count
tax_count <- as.data.frame(t(tax_count))
tax_count$Time <- rownames(tax_count)
tax_count <- tax_count %>% arrange(Time)
tax_count
tax_count <- as.data.frame(t(tax_count))
tax_count <- taxa_time_table(ps,
time.col = "Time_hr",
normalize = TRUE,
remove.zero = TRUE
)
# head(tax_count)
message(paste0("No. of timepoints ", nrow(tax_count)))
tax_count <- as.data.frame(t(tax_count))
tax_count$Time <- as.numeric(rownames(tax_count))
tax_count <- tax_count %>% arrange(Time)
head(tax_count)
tax_count <- tax_count %>% arrange(Time)
head(tax_count)
tax_count <- taxa_time_table(ps,
time.col = "Time_hr",
normalize = TRUE,
remove.zero = TRUE
)
# head(tax_count)
message(paste0("No. of timepoints ", nrow(tax_count)))
tax_count <- as.data.frame(t(tax_count))
tax_count
tax_count$Time <- as.numeric(rownames(tax_count))
tax_count <- tax_count %>% arrange(Time)
data <- tax_count[, c(ncol(tax_count), 1:ntaxa(ps))]
if (experimentStart == -1) {
experimentStart <- data[1, 1]
}
library(syncomR)
data(SyncomFiltData)
ps1.b5 <- subset_samples(SyncomFiltData, StudyIdentifier== "Bioreactor A")
dat.stab <- stability_properties(ps1.b5, time.col = "Time_hr",
experimentStart = 52, # first spiked sample after initiation of continous feed operation
tref=152)
library(syncomR)
data(SyncomGMM)
focal.species <- c("Akkermansia_muciniphila", "Bacteroides_xylanisolvens", "Bacteroides_ovatus")
p<- plot_module_abundances(SyncomGMM,
tax.variable = focal.species,
mm.variable = c("propionate production III", "mucin degradation"),
color.pal = syncom_colors("BacterialSpecies"),
nrow=3,
ncol=1)
p + theme_syncom() + theme(legend.position="right")
data(SyncomFiltData)
ps1.b5 <- subset_samples(SyncomFiltData, StudyIdentifier== "Bioreactor A")
dat.stab <- stability_properties(ps1.b5, time.col = "Time_hr",
experimentStart = 52, # first spiked sample after initiation of continous feed operation
tref=152)
plot_resistance(dat.stab) + coord_polar()
plot_resistance(dat.stab) + ylim(c(0,0.6)) + coord_polar()
plot_resistance(dat.stab) + ylim(c(0,0.6)) + coord_polar() + theme_bw()
euc <- plot_resilience(dat.stab, method = "euclidean") + coord_polar()
canb <- plot_resilience(dat.stab, method = "canberra") + coord_polar()
euc /canb
library(syncomR)
library(readr)
library(tidyr)
library(magrittr)
#library(edgeR)
library(RColorBrewer)
library(DT)
library(knitr)
library(patchwork)
fasting_cols <- c("#C71585", "#008080")
fer_cols <- c(Bioreactor_5= "#b2182b", Bioreactor_6="#2166ac", Bioreactor_8 = "#35978f")
euc <- plot_resilience(dat.stab, method = "euclidean") + coord_polar()
canb <- plot_resilience(dat.stab, method = "canberra") + coord_polar()
euc /canb
euc <- plot_resilience(dat.stab, method = "euclidean") + ylim(c(0,0.6)) + coord_polar()
canb <- plot_resilience(dat.stab, method = "canberra")+ ylim(c(0,0.6)) + coord_polar()
euc + canb
euc <- plot_resilience(dat.stab, method = "euclidean")
canb <- plot_resilience(dat.stab, method = "canberra")#+ ylim(c(0,0.6)) + coord_polar()
euc / canb
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a")
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(0,0.4))
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(0,0.4)) + coord_polar()
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(-0.4,0.4)) + coord_polar()
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(-0.4,0.4)) xlim(c(10, 500)) + coord_polar()
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(-0.4,0.4)) + xlim(c(10, 500)) + coord_polar()
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(-0.4,0.4)) + xlim(c(10, 460)) + coord_polar()
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(-0.4,0.4)) + xlim(c(100, 460)) + coord_polar()
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(-0.4,0.4)) + xlim(c(150, 460)) + coord_polar()
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(-0.4,0.4)) + xlim(c(130, 460)) + coord_polar()
plot_resistance(dat.stab) + ylim(c(-0.2,0.6)) + coord_polar() + theme_bw()
plot_resilience_online(dat.stab, col.low = "#fa9fb5", col.high = "#49006a") + ylim(c(-0.4,0.4)) + xlim(c(130, 460)) + coord_polar() + theme_bw()
data(SyncomGMM)
focal.species <- c("Akkermansia_muciniphila", "Bacteroides_xylanisolvens", "Bacteroides_ovatus")
p<- plot_module_abundances(SyncomGMM,
tax.variable = focal.species,
mm.variable = c("propionate production III", "mucin degradation"),
color.pal = syncom_colors("BacterialSpecies"),
nrow=3,
ncol=1)
p + theme_syncom() + theme(legend.position="right")
ps.rel <- microbiome::transform(SyncomFiltData, "compositional")
find_taxa <- function(x, which.taxa=c("most_abund", "least_abund")){
find_taxa <- function(x, which.taxa=c("most_abund", "least_abund")){
otu.df <- tax <-abund <-sample_id<- taxon<- res<- NULL
otu.df <- as.data.frame(t(abundances(x)))
if (method=="most_abund"){
tax <- max.col(otu.df, "first")
abund <- otu.df[cbind(1:nrow(otu.df), tax)]
sample_id <- cbind(rownames(otu.df), tax)
taxon <- names(otu.df)[tax]
} else if (method=="least_abund"){
# add positive value to zero to avoid getting zero abundance as lowest
otu.df[otu.df==0] <- max(colSums(otu.df))# trying to figure this out
tax <- apply(otu.df, 1, which.min)
abund <- otu.df[cbind(1:nrow(otu.df), tax)]
sample_id <- cbind(rownames(otu.df), tax)
taxon <- names(otu.df)[tax]
}
res <- data.frame(sample_id, taxon, abund)
#head(res)
colnames(res) <- c("sample_id", "tax_index",paste0(method,"_taxon"),"abundance")
return(res)
}
}
otu.tb <- find_taxa(ps.rel, which.taxa="most_abund")
head(otu.tb)
find_taxa <- function(x, which.taxa=c("most_abund", "least_abund")){
otu.df <- tax <-abund <-sample_id<- taxon<- res<- NULL
otu.df <- as.data.frame(t(abundances(x)))
if (method=="most_abund"){
tax <- max.col(otu.df, "first")
abund <- otu.df[cbind(1:nrow(otu.df), tax)]
sample_id <- cbind(rownames(otu.df), tax)
taxon <- names(otu.df)[tax]
} else if (method=="least_abund"){
# add positive value to zero to avoid getting zero abundance as lowest
otu.df[otu.df==0] <- max(colSums(otu.df))# trying to figure this out
tax <- apply(otu.df, 1, which.min)
abund <- otu.df[cbind(1:nrow(otu.df), tax)]
sample_id <- cbind(rownames(otu.df), tax)
taxon <- names(otu.df)[tax]
}
res <- data.frame(sample_id, taxon, abund)
#head(res)
colnames(res) <- c("sample_id", "tax_index",paste0(method,"_taxon"),"abundance")
return(res)
}
otu.tb <- find_taxa(ps.rel, which.taxa="most_abund")
}
#' @title Make taxa abundance table
#'
#' @description Converts \code{\link{phyloseq-class}} object to taxa table arranged by time point.
#'
#' @details The output of this function can be used for functions that require taxa tables in matrix form.
#' @param ps a \code{\link{phyloseq-class}} with compositional data
#' @param which.taxa find "most_abund" or "least_abund"
#' @return Normalized or raw counts taxa abundance table (taxaare rows and timepoits columns).
#' @references
#' \itemize{
#' \item{}{Faust, K., et al. (2018). Signatures of ecological processes in
#' microbial community time series. Microbiome, 6(1), 120. https://doi.org/10.1186/s40168-018-0496-2}
#' \item{}{'Shetty SA et al (2019-2024)}
#' \item{}{To cite the package, see citation('syncomR')}
#' }
#' @examples
#' data(SyncomFiltData)
#' ps.rel <- microbiome::transform(SyncomFiltData, "compositional")
#' otu.tb <- find_taxa(ps.rel, which.taxa="most_abund")
#' head(otu.tb)
#' @author Contact: Sudarshan A. Shetty \email{sudarshanshetty9@gmail.com}
#' @export
#' @keywords Anlaysis and visualization
find_taxa <- function(x, which.taxa=c("most_abund", "least_abund")){
otu.df <- tax <-abund <-sample_id<- taxon<- res<- NULL
otu.df <- as.data.frame(t(abundances(x)))
if (which.taxa=="most_abund"){
tax <- max.col(otu.df, "first")
abund <- otu.df[cbind(1:nrow(otu.df), tax)]
sample_id <- cbind(rownames(otu.df), tax)
taxon <- names(otu.df)[tax]
} else if (which.taxa=="least_abund"){
# add positive value to zero to avoid getting zero abundance as lowest
otu.df[otu.df==0] <- max(colSums(otu.df))# trying to figure this out
tax <- apply(otu.df, 1, which.min)
abund <- otu.df[cbind(1:nrow(otu.df), tax)]
sample_id <- cbind(rownames(otu.df), tax)
taxon <- names(otu.df)[tax]
}
res <- data.frame(sample_id, taxon, abund)
#head(res)
colnames(res) <- c("sample_id", "tax_index",paste0(which.taxa,"_taxon"),"abundance")
return(res)
}
otu.tb <- find_taxa(ps.rel, which.taxa="most_abund")
head(oti.tb)
head(otu.tb)
roxygen2::roxygenize() #Documentation
devtools::document() #
library(syncomR)
devtools::build_site()
